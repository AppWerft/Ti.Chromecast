/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.googlecast;

import java.util.ArrayList;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Looper;
import android.os.Message;
import android.support.v7.media.MediaControlIntent;
import android.support.v7.media.MediaRouter;
import android.support.v7.media.MediaRouter.RouteInfo;

import com.google.android.gms.cast.CastMediaControlIntent;
import com.google.android.gms.cast.framework.CastContext;

@Kroll.proxy(creatableInModule = ChromecastModule.class)
public class RouteInfoProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = ChromecastModule.LCAT;

	@SuppressWarnings("unused")
	public RouteInfo route;
	private static final int MSG_FIRST_ID = KrollModule.MSG_LAST_ID + 1;
	private static final int MSG_SELECT = MSG_FIRST_ID + 100;
	private static final int MSG_START = MSG_FIRST_ID + 101;

	public RouteInfoProxy(RouteInfo route) {
		this.route = route;
	}

	public RouteInfo getRoute() {
		return this.route;
	}

	@Kroll.method
	public String getName() {
		return this.route.getName();
	}

	@Kroll.method
	public String getDescription() {
		return this.route.getDescription();
	}

	@Kroll.method
	public String getId() {
		return this.route.getId();
	}

	@Kroll.method
	public boolean isSelected() {
		return this.route.isSelected();
	}

	@Kroll.method
	public int getDeviceType() {
		return this.route.getDeviceType();
	}

	@Kroll.method
	public boolean isEnabled() {
		return this.route.isEnabled();
	}

	@Kroll.method
	public KrollDict toJSON() {
		KrollDict kd = new KrollDict();
		kd.put("canDisconnect", this.route.canDisconnect());
		kd.put("name", this.route.getName());
		kd.put("description", this.route.getDescription());
		kd.put("enabled", this.route.isEnabled());
		kd.put("selected", this.route.isSelected());
		kd.put("connectionState", this.route.getConnectionState());
		kd.put("deviceType", this.route.getDeviceType());
		MediaRouter.ProviderInfo provInfo = this.route.getProvider();
		kd.put("provider", this.route.getProvider().toString());

		return kd;
	}

	@Kroll.method
	public void select() {
		getMainHandler().obtainMessage(MSG_SELECT).sendToTarget();
		this.route.select();
	}

	@Kroll.method
	public void playRemotePlayback(String uri) {
		Bundle bundle = new Bundle();
		bundle.putString("uri", uri);
		bundle.putBoolean("live", false);
		bundle.putBoolean("enqueue", false);
		getMainHandler().obtainMessage(MSG_START, bundle).sendToTarget();
	}

	@Kroll.method
	public void enqueueRemotePlayback(String uri) {
		Bundle bundle = new Bundle();
		bundle.putString("uri", uri);
		bundle.putBoolean("enqueue", true);
		getMainHandler().obtainMessage(MSG_START, bundle).sendToTarget();
	}

	@Kroll.method
	public void playLiveAudio(String uri) {
		Bundle bundle = new Bundle();
		bundle.putString("uri", uri);
		bundle.putBoolean("live", true);
		getMainHandler().obtainMessage(MSG_START, bundle).sendToTarget();
	}

	@Kroll.method
	public void playLiveVideo(String uri) {
		Bundle bundle = new Bundle();
		bundle.putString("uri", uri);
		bundle.putBoolean("live", true);
		bundle.putBoolean("video", true);
		getMainHandler().obtainMessage(MSG_START, bundle).sendToTarget();
	}

	@Kroll.method
	public void enqueueRemotePlayback() {

	}

	private void handleSendControlRequest(Bundle bundle) {
		checkCallingThread();
		boolean enqueue = bundle.containsKey("enqueue") ? true : false;
		boolean live = bundle.containsKey("live") ? true : false;
		String uri = bundle.getString("uri");

		Intent intent = new Intent(MediaControlIntent.ACTION_START_SESSION);
		if (!live)
			intent.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);

		intent.putExtra(CastMediaControlIntent.EXTRA_CAST_APPLICATION_ID,
				CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID);

		intent.putExtra(CastMediaControlIntent.EXTRA_CAST_RELAUNCH_APPLICATION,
				true);
		intent.putExtra(CastMediaControlIntent.EXTRA_DEBUG_LOGGING_ENABLED,
				true);

		intent.putExtra(
				CastMediaControlIntent.EXTRA_CAST_STOP_APPLICATION_WHEN_SESSION_ENDS,
				true);

		this.route.sendControlRequest(intent,
				new MediaRouter.ControlRequestCallback() {
					@Override
					public void onResult(Bundle data) {
						super.onResult(data);
						String sessionId = data
								.getString(MediaControlIntent.EXTRA_SESSION_ID);
					}
				});
	}

	@Kroll.method
	public boolean canDisconnect() {
		return this.route.canDisconnect();
	}

	@Override
	public boolean handleMessage(Message msg) {
		switch (msg.what) {
		case MSG_SELECT: {
			this.route.select();
			return true;
		}
		case MSG_START: {
			Bundle bundle = (Bundle) (msg.obj);
			handleSendControlRequest(bundle);
			return true;
		}
		default: {
			return super.handleMessage(msg);
		}
		}
	}

	public RouteInfoProxy() {
		super();

	}

	static void checkCallingThread() {
		if (Looper.myLooper() != Looper.getMainLooper()) {
			throw new IllegalStateException(
					"The media router service must only be "
							+ "accessed on the application's main thread.");
		}
	}

}